package DynamicProgramming;

public class ClimbingStairs70 {
	
	//<Trial01>
	
	//머리 터질듯.
	
	//1 <1>  [1]      -> (1)
	//2 <2>  [1+1]    -> (1,1),(2)
	//3 <3>  [2+1]    -> (1,1,1),(2,1),(1,2)
	//4 <5>  [1+3+1]  -> (1,1,1,1),(2,1,1),(1,2,1),(1,1,2),(2,2)
	//5 <8>  [3+4+1]  -> (1,1,1,1,1),(2,1,1,1),(1,2,1,1),(1,1,2,1),(1,1,1,2),(2,2,1),(2,1,2),(1,2,2)
	//6 <13> [6+5+1+1]-> (1,1,1,1,1,1),(2,1,1,1,1),(1,2,1,1,1),(1,1,2,1,1),(1,1,1,2,1),(1,1,1,1,2),
	//                   (2,2,1,1),(2,1,2,1),(2,1,1,2),(1,2,2,1),(1,2,1,2),(1,1,2,2),(2,2,2)
	//7                ->(2,2,1,1,1)(2,1,2,1,1)(2,1,1,2,1)(2,1,1,1,2) (1,2,2,1,1)(1,2,1,2,1)(1,2,1,1,2)...(1,1,1,2,2)  <4+3+2+1>
	//                 ->(2,2,2,1)(2,2,1,2)(2,1,2,2)(1,2,2,2)                                                          <4>
	

	
	
	
	//<문제풀이 by earlme>
	
	//수작업으로 경우의 수를 돌리면 나오는 패턴이 
	
	//1->2->3->5->8->13 이다.
	
	//이는 앞에꺼 두자리 숫자를 더한게 뒤에꺼가 된다.
	
	//1,1로 시작하는 피보나치 수열이 아닌 1,2로 시작하는 피보나치 수열이라고 생각하면 된다. 
	
	//Runtime: 0 ms, faster than 100.00% of Java online submissions for Climbing Stairs.
	//Memory Usage: 32.9 MB, less than 5.26% of Java online submissions for Climbing Stairs.
	
    public static int climbStairs(int n) {
        int a = 0, b = 1, temp = 0;
        for(int i = 0; i < n; i++) {
            temp = b; 
            b = b + a; 
            a = temp;
        }
        return (n > 0) ? b : 0;
    }
	
	public static void main(String[] args) {
		int n = 6;
		System.out.println(climbStairs(n));
	}
}
