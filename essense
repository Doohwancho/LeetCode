
---
1. Why problem-solve?



a. logical reasoning skills: deducting a -> b -> c -> d, planning & simulating ahead
b. learn data-structure
c. familiarize with programming language
d. learn self-discipline (if you solve one PS a day everyday)
e. learn different algorithms


importance in order

a >>> b > c > d >>> e






---
2. How to learn PS effectively?







-beginer level


0. know why you want to learn PS.





1. do super easy questions first, many times. 

complete many easy questions to, 

A. get a mere grasp of what PS is
B. get a positive feelings/attitude towards PS

quantity >>> quality

it's okay to brute-force as long as it passes it.





2. if you have no idea how to solve it, it's okay to look it up fast.

b/c easy questions don't test you on logical reasoning. 

easy questions simply test you whether you know certain data structure or not.






3. Do one PS a day & leave every trace of your work on github.





-intermediate level



1. don't start coding before you finish with your logic in your head/note/blackboard from A-Z.
** 문제를 반복해서 푸는 것, 쉬운 문제를 풀어 재끼는 것은 실력향상과 아무연관이 없음.
knowledge-tree에 있던 개념을 어떻게 step-by-step으로 적용할 것인지 생각하는 과정이 중요.




2. if you can't figure it out, instead of looking whole part of solution, look at part of solution and try to build up from there on you own.


3. even if you've figured it out, try different approaches. 


4. add annotations containing explaination written in your own words, and 10 year old should be able to read them and understand.


5. everytime you learn something new, add it to your PS knowledge-tree.


6. Do at least one PS a day & leave every trace of your work on github




